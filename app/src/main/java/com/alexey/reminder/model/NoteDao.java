package com.alexey.reminder.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.alexey.reminder.model.PriorityEnum.Priority;
import com.alexey.reminder.model.PriorityEnum.PriorityConverter;
import com.alexey.reminder.model.TypeNoteEnum.TypeNote;
import com.alexey.reminder.model.TypeNoteEnum.TypeNoteConverter;

import com.alexey.reminder.model.Note;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTE".
*/
public class NoteDao extends AbstractDao<Note, String> {

    public static final String TABLENAME = "NOTE";

    /**
     * Properties of entity Note.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Uuid = new Property(0, String.class, "uuid", true, "UUID");
        public final static Property Header = new Property(1, String.class, "header", false, "HEADER");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property Body = new Property(3, String.class, "body", false, "BODY");
        public final static Property TimeStamp = new Property(4, java.util.Date.class, "timeStamp", false, "TIME_STAMP");
        public final static Property FireDate = new Property(5, java.util.Date.class, "fireDate", false, "FIRE_DATE");
        public final static Property Performed = new Property(6, boolean.class, "performed", false, "PERFORMED");
        public final static Property RemindOf = new Property(7, Long.class, "remindOf", false, "REMIND_OF");
        public final static Property ImageCut = new Property(8, byte[].class, "imageCut", false, "IMAGE_CUT");
        public final static Property Image = new Property(9, byte[].class, "image", false, "IMAGE");
        public final static Property Priority = new Property(10, int.class, "priority", false, "PRIORITY");
        public final static Property TypeNote = new Property(11, int.class, "typeNote", false, "TYPE_NOTE");
    };

    private final PriorityConverter priorityConverter = new PriorityConverter();
    private final TypeNoteConverter typeNoteConverter = new TypeNoteConverter();

    public NoteDao(DaoConfig config) {
        super(config);
    }
    
    public NoteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTE\" (" + //
                "\"UUID\" TEXT PRIMARY KEY NOT NULL ," + // 0: uuid
                "\"HEADER\" TEXT NOT NULL ," + // 1: header
                "\"DESCRIPTION\" TEXT NOT NULL ," + // 2: description
                "\"BODY\" TEXT NOT NULL ," + // 3: body
                "\"TIME_STAMP\" INTEGER NOT NULL ," + // 4: timeStamp
                "\"FIRE_DATE\" INTEGER," + // 5: fireDate
                "\"PERFORMED\" INTEGER NOT NULL ," + // 6: performed
                "\"REMIND_OF\" INTEGER," + // 7: remindOf
                "\"IMAGE_CUT\" BLOB," + // 8: imageCut
                "\"IMAGE\" BLOB," + // 9: image
                "\"PRIORITY\" INTEGER NOT NULL ," + // 10: priority
                "\"TYPE_NOTE\" INTEGER NOT NULL );"); // 11: typeNote
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Note entity) {
        stmt.clearBindings();
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(1, uuid);
        }
        stmt.bindString(2, entity.getHeader());
        stmt.bindString(3, entity.getDescription());
        stmt.bindString(4, entity.getBody());
        stmt.bindLong(5, entity.getTimeStamp().getTime());
 
        java.util.Date fireDate = entity.getFireDate();
        if (fireDate != null) {
            stmt.bindLong(6, fireDate.getTime());
        }
        stmt.bindLong(7, entity.getPerformed() ? 1L: 0L);
 
        Long remindOf = entity.getRemindOf();
        if (remindOf != null) {
            stmt.bindLong(8, remindOf);
        }
 
        byte[] imageCut = entity.getImageCut();
        if (imageCut != null) {
            stmt.bindBlob(9, imageCut);
        }
 
        byte[] image = entity.getImage();
        if (image != null) {
            stmt.bindBlob(10, image);
        }
        stmt.bindLong(11, priorityConverter.convertToDatabaseValue(entity.getPriority()));
        stmt.bindLong(12, typeNoteConverter.convertToDatabaseValue(entity.getTypeNote()));
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Note readEntity(Cursor cursor, int offset) {
        Note entity = new Note( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // uuid
            cursor.getString(offset + 1), // header
            cursor.getString(offset + 2), // description
            cursor.getString(offset + 3), // body
            new java.util.Date(cursor.getLong(offset + 4)), // timeStamp
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // fireDate
            cursor.getShort(offset + 6) != 0, // performed
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // remindOf
            cursor.isNull(offset + 8) ? null : cursor.getBlob(offset + 8), // imageCut
            cursor.isNull(offset + 9) ? null : cursor.getBlob(offset + 9), // image
            priorityConverter.convertToEntityProperty(cursor.getInt(offset + 10)), // priority
            typeNoteConverter.convertToEntityProperty(cursor.getInt(offset + 11)) // typeNote
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Note entity, int offset) {
        entity.setUuid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setHeader(cursor.getString(offset + 1));
        entity.setDescription(cursor.getString(offset + 2));
        entity.setBody(cursor.getString(offset + 3));
        entity.setTimeStamp(new java.util.Date(cursor.getLong(offset + 4)));
        entity.setFireDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setPerformed(cursor.getShort(offset + 6) != 0);
        entity.setRemindOf(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setImageCut(cursor.isNull(offset + 8) ? null : cursor.getBlob(offset + 8));
        entity.setImage(cursor.isNull(offset + 9) ? null : cursor.getBlob(offset + 9));
        entity.setPriority(priorityConverter.convertToEntityProperty(cursor.getInt(offset + 10)));
        entity.setTypeNote(typeNoteConverter.convertToEntityProperty(cursor.getInt(offset + 11)));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Note entity, long rowId) {
        return entity.getUuid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Note entity) {
        if(entity != null) {
            return entity.getUuid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
